name: Update README Progress

on:
  push:
  issues:
    types: [opened, closed, reopened, milestoned, demilestoned]
  milestone:
    types: [created, edited, deleted, closed, opened]
  workflow_dispatch:

jobs:
  update-progress:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Fetch All Milestones and Update README
        id: milestone
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Fetch all milestones
            const milestones = await github.rest.issues.listMilestones({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              sort: 'created',
              direction: 'asc'
            });
            
            console.log(`Found ${milestones.data.length} milestones`);
            
            // Read current README
            let readmeContent = fs.readFileSync('README.md', 'utf8');
            
            // Helper function to get progress color
            function getProgressColor(percentage) {
              if (percentage >= 100) return 'brightgreen';
              if (percentage >= 75) return 'green';
              if (percentage >= 50) return 'yellow';
              if (percentage >= 25) return 'orange';
              return 'red';
            }
            
            // Helper function to get status indicator
            function getStatusIndicator(milestone) {
              if (milestone.state === 'closed') return 'Completed';
              if (milestone.open_issues === 0 && milestone.closed_issues === 0) return 'Not Started';
              if (milestone.open_issues > 0) return 'In Progress';
              return 'Planning';
            }
            
            // Helper function to create milestone card
            function createMilestoneCard(milestone, index) {
              const totalIssues = milestone.open_issues + milestone.closed_issues;
              const percentage = totalIssues > 0 ? Math.round((milestone.closed_issues / totalIssues) * 100) : 0;
              const color = getProgressColor(percentage);
              const status = getStatusIndicator(milestone);
              
              // Get milestone description or create a default one
              const description = milestone.description || `Research milestone focusing on ${milestone.title.toLowerCase()}.`;
              
              // Create task list based on milestone title
              let taskList = [];
              const title = milestone.title.toLowerCase();
              
              if (title.includes('x-ray')) {
                taskList = [
                  'X-ray equipment setup',
                  'Specimen preparation protocols', 
                  'Image capture procedures',
                  'Data processing pipeline'
                ];
              } else if (title.includes('classification')) {
                taskList = [
                  'Species identification protocols',
                  'Morphological measurements',
                  'Database development', 
                  'Classification algorithms'
                ];
              } else if (title.includes('toepad')) {
                taskList = [
                  'Toepad morphology analysis',
                  'Adhesion force measurements',
                  'Surface texture studies',
                  'Comparative analysis'
                ];
              } else if (title.includes('coloring') || title.includes('3d')) {
                taskList = [
                  '3D scanning protocols',
                  'Color pattern mapping',
                  'Visualization tools',
                  'Pattern analysis algorithms'
                ];
              } else {
                taskList = [
                  'Research methodology development',
                  'Data collection procedures',
                  'Analysis framework',
                  'Documentation and reporting'
                ];
              }
              
              const taskListHtml = taskList.map(task => `- [ ] ${task}`).join('\n');
              
              // Format milestone title for URL encoding
              const encodedTitle = encodeURIComponent(milestone.title);
              
              const cardContent = [
                `### **Milestone ${milestone.number}: ${milestone.title}**`,
                '<div align="center">',
                '',
                `![Progress](https://img.shields.io/badge/Progress-${percentage}%25-${color})`,
                '',
                '</div>',
                '',
                `**Status:** ${status}`,
                `**Issues:** ${milestone.closed_issues}/${totalIssues} completed`,
                `**Timeline:** ${milestone.due_on ? new Date(milestone.due_on).toLocaleDateString() : 'TBD'}`,
                '',
                `> ${description}`,
                '',
                '<details>',
                '<summary><strong>View Details</strong></summary>',
                '',
                taskListHtml,
                '',
                '</details>',
                '',
                `[View Milestone](${milestone.html_url}) â€¢ [View Issues](https://github.com/${context.repo.owner}/${context.repo.repo}/issues?q=milestone%3A%22${encodedTitle}%22)`
              ].join('\n');
              
              return cardContent;
            }
            
            // Generate milestone cards
            const milestoneCards = [];
            const activeMilestones = milestones.data.filter(m => m.state === 'open' || m.closed_issues > 0);
            
            for (let i = 0; i < activeMilestones.length; i += 2) {
              const leftCard = createMilestoneCard(activeMilestones[i], i);
              const rightCard = i + 1 < activeMilestones.length ? createMilestoneCard(activeMilestones[i + 1], i + 1) : '';
              
              const rowContent = [
                '<tr>',
                '<td width="50%" valign="top">',
                '',
                leftCard,
                '',
                '</td>',
                '<td width="50%" valign="top">',
                '',
                rightCard,
                '',
                '</td>',
                '</tr>'
              ].join('\n');
              
              milestoneCards.push(rowContent);
            }
            
            // Calculate overall statistics
            const totalMilestones = activeMilestones.length;
            const completedMilestones = activeMilestones.filter(m => {
              const totalIssues = m.open_issues + m.closed_issues;
              return totalIssues > 0 ? (m.closed_issues / totalIssues) >= 1 : false;
            }).length;
            
            const totalIssues = activeMilestones.reduce((sum, m) => sum + m.open_issues + m.closed_issues, 0);
            const closedIssues = activeMilestones.reduce((sum, m) => sum + m.closed_issues, 0);
            const overallProgress = totalIssues > 0 ? Math.round((closedIssues / totalIssues) * 100) : 0;
            const overallColor = getProgressColor(overallProgress);
            
            console.log(`Overall progress: ${overallProgress}% (${closedIssues}/${totalIssues} issues)`);
            console.log(`Milestones: ${completedMilestones}/${totalMilestones} completed`);
            
            // Find and replace the milestone cards section
            const milestoneTableStart = '<!-- Milestone Cards Section -->';
            const milestoneTableEnd = '</table>';
            
            const startIndex = readmeContent.indexOf(milestoneTableStart);
            const endIndex = readmeContent.indexOf(milestoneTableEnd, startIndex) + milestoneTableEnd.length;
            
            if (startIndex !== -1 && endIndex !== -1) {
              const newMilestoneSection = [
                milestoneTableStart,
                '<table width="100%">',
                milestoneCards.join('\n'),
                '</table>'
              ].join('\n');
              
              readmeContent = readmeContent.substring(0, startIndex) + newMilestoneSection + readmeContent.substring(endIndex);
            }
            
            // Update overall progress badges if they exist
            const overallProgressRegex = /!\[Overall Progress\]\(https:\/\/img\.shields\.io\/badge\/Overall_Progress-\d+%25-\w+\)/;
            if (overallProgressRegex.test(readmeContent)) {
              readmeContent = readmeContent.replace(
                overallProgressRegex, 
                `![Overall Progress](https://img.shields.io/badge/Overall_Progress-${overallProgress}%25-${overallColor})`
              );
            }
            
            const milestonesRegex = /!\[Milestones\]\(https:\/\/img\.shields\.io\/badge\/Milestones-\d+_Total-blue\)/;
            if (milestonesRegex.test(readmeContent)) {
              readmeContent = readmeContent.replace(
                milestonesRegex,
                `![Milestones](https://img.shields.io/badge/Milestones-${totalMilestones}_Total-blue)`
              );
            }
            
            const issuesRegex = /!\[Issues\]\(https:\/\/img\.shields\.io\/badge\/Issues-\d+_Open-green\)/;
            if (issuesRegex.test(readmeContent)) {
              const openIssues = totalIssues - closedIssues;
              const issueColor = openIssues === 0 ? 'brightgreen' : openIssues < 5 ? 'green' : 'yellow';
              readmeContent = readmeContent.replace(
                issuesRegex,
                `![Issues](https://img.shields.io/badge/Issues-${openIssues}_Open-${issueColor})`
              );
            }
            
            // Write updated README
            fs.writeFileSync('README.md', readmeContent);
            
            // Set outputs for commit message
            core.setOutput('milestones_count', totalMilestones);
            core.setOutput('overall_progress', overallProgress);
            core.setOutput('completed_milestones', completedMilestones);
            
      - name: Commit Changes
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if there are changes
          if git diff --quiet README.md; then
            echo "No changes to commit"
          else
            git add README.md
            git commit -m "Update milestone progress: ${{ steps.milestone.outputs.overall_progress }}% overall (${{ steps.milestone.outputs.completed_milestones }}/${{ steps.milestone.outputs.milestones_count }} milestones completed)"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}